// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// contains
bool contains(const std::string& str, const std::string substr);
RcppExport SEXP _microarrayTools_contains(SEXP strSEXP, SEXP substrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type str(strSEXP);
    Rcpp::traits::input_parameter< const std::string >::type substr(substrSEXP);
    rcpp_result_gen = Rcpp::wrap(contains(str, substr));
    return rcpp_result_gen;
END_RCPP
}
// searchDesc
int searchDesc(std::vector< std::string > desc, std::vector< std::string > searchTerms);
RcppExport SEXP _microarrayTools_searchDesc(SEXP descSEXP, SEXP searchTermsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector< std::string > >::type desc(descSEXP);
    Rcpp::traits::input_parameter< std::vector< std::string > >::type searchTerms(searchTermsSEXP);
    rcpp_result_gen = Rcpp::wrap(searchDesc(desc, searchTerms));
    return rcpp_result_gen;
END_RCPP
}
// containsString
bool containsString(const std::string& str, const std::string substr);
RcppExport SEXP _microarrayTools_containsString(SEXP strSEXP, SEXP substrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type str(strSEXP);
    Rcpp::traits::input_parameter< const std::string >::type substr(substrSEXP);
    rcpp_result_gen = Rcpp::wrap(containsString(str, substr));
    return rcpp_result_gen;
END_RCPP
}
// searchDescReturnHits
NumericVector searchDescReturnHits(std::vector< std::string > desc, std::vector< std::string > searchTerms);
RcppExport SEXP _microarrayTools_searchDescReturnHits(SEXP descSEXP, SEXP searchTermsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector< std::string > >::type desc(descSEXP);
    Rcpp::traits::input_parameter< std::vector< std::string > >::type searchTerms(searchTermsSEXP);
    rcpp_result_gen = Rcpp::wrap(searchDescReturnHits(desc, searchTerms));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_microarrayTools_contains", (DL_FUNC) &_microarrayTools_contains, 2},
    {"_microarrayTools_searchDesc", (DL_FUNC) &_microarrayTools_searchDesc, 2},
    {"_microarrayTools_containsString", (DL_FUNC) &_microarrayTools_containsString, 2},
    {"_microarrayTools_searchDescReturnHits", (DL_FUNC) &_microarrayTools_searchDescReturnHits, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_microarrayTools(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
